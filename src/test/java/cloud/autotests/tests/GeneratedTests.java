package cloud.autotests.tests;

import cloud.autotests.helpers.DriverUtils;
import cloud.autotests.helpers.AutorisationForm;
import io.qameta.allure.Description;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static com.codeborne.selenide.Selenide.*;
import static io.qameta.allure.Allure.step;
import static org.assertj.core.api.Assertions.assertThat;


public class GeneratedTests extends TestBase {
    AutorisationForm autorisationForm = new AutorisationForm();

    @CsvSource(value = {
            " | Логин не указан",
            "asjdlasjdlkajsd | Такого аккаунта нет",
            "asjdlasjdlkajsd123 | Такого аккаунта нет",
            "lkasjdlkjaslkjdklasjd123@ya.ru | Такого аккаунта нет",
            "1a; | Такой логин не подойдет",
            "1a@ | Такой логин не подойдет",
            "1a@.ru | Такой логин не подойдет",
            "1a@@yandex.ru | Такой логин не подойдет",
            "Admin | Логин введен некорректно или удален"
    },
            delimiter = '|'
    )
    @Description("Soon to be implemented by you (or QA.GURU engineers)")
    @ParameterizedTest(name = "Yandex login form. Negative test for notifications with incorrect email ")
    void alertEmailTest(String testLogin, String expectedAlert) {
        autorisationForm.openStartPage()
                .openAutorisationForm()
                .clickLoginForEmail()
                .setEmail(testLogin)
                .clickEnter()
                .assertAlertEmail(expectedAlert);
    }

    String loginYandex = System.getProperty("login", "test");
    // ./gradlew clean test -Dlogin=Zyryanov
    @CsvSource(value = {
            " | Пароль не указан",
            "123 | Неверный пароль",
            "qwerty | Неверный пароль",
            "qwerty123 | Неверный пароль",
            "qwerty123@ | Неверный пароль"
    },
            delimiter = '|'
    )
    @Description("Soon to be implemented by you (or QA.GURU engineers)")
    @ParameterizedTest(name = "Yandex login form. Negative test for notifications with incorrect password")
    void alertPasswordTest(String testPassword, String expectedAlert) {
        autorisationForm.openStartPage()
                .openAutorisationForm()
                .clickLoginForEmail()
                .setEmail(loginYandex)
                .clickEnter()
                .setPassword(testPassword)
                .clickEnter()
                .assertAlertPassword(expectedAlert);
    }

    @Test
    @Description("Autogenerated test")
    @DisplayName("Page title should have header text")
    void titleTest() {
        autorisationForm.openStartPage();

        step("Page title should have text 'Яндекс'", () -> {
            String expectedTitle = "Яндекс";
            String actualTitle = title();

            assertThat(actualTitle).isEqualTo(expectedTitle);
        });
    }

    @Test
    @Description("Autogenerated test")
    @DisplayName("Page console log should not have errors")
    void consoleShouldNotHaveErrorsTest() {
        autorisationForm.openStartPage();

        step("Console logs should not contain text 'SEVERE'", () -> {
            String consoleLogs = DriverUtils.getConsoleLogs();
            String errorText = "SEVERE";

            assertThat(consoleLogs).doesNotContain(errorText);
        });
    }
}